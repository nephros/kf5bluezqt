diff --git a/src/manager.cpp b/src/manager.cpp
index eac5c7d..21ae15f 100644
--- a/src/manager.cpp
+++ b/src/manager.cpp
@@ -66,6 +66,20 @@ bool Manager::setBluetoothBlocked(bool blocked)
     }
 }
 
+bool Manager::monitorObjectManagerInterfaces() const
+{
+    return d->m_monitorObjectManagerInterfaces;
+}
+
+void Manager::setMonitorObjectManagerInterfaces(bool monitor)
+{
+    if (d->m_monitorObjectManagerInterfaces != monitor) {
+        d->m_monitorObjectManagerInterfaces = monitor;
+        d->updateObjectManagerConnections();
+        Q_EMIT monitorObjectManagerInterfacesChanged(monitor);
+    }
+}
+
 AdapterPtr Manager::usableAdapter() const
 {
     return d->m_usableAdapter;
diff --git a/src/manager.h b/src/manager.h
index b28eacf..0fc7bbc 100644
--- a/src/manager.h
+++ b/src/manager.h
@@ -82,6 +82,7 @@ class BLUEZQT_EXPORT Manager : public QObject
     Q_PROPERTY(bool operational READ isOperational NOTIFY operationalChanged)
     Q_PROPERTY(bool bluetoothOperational READ isBluetoothOperational NOTIFY bluetoothOperationalChanged)
     Q_PROPERTY(bool bluetoothBlocked READ isBluetoothBlocked WRITE setBluetoothBlocked NOTIFY bluetoothBlockedChanged)
+    Q_PROPERTY(bool monitorObjectManagerInterfaces READ monitorObjectManagerInterfaces WRITE setMonitorObjectManagerInterfaces NOTIFY monitorObjectManagerInterfacesChanged)
     Q_PROPERTY(AdapterPtr usableAdapter READ usableAdapter NOTIFY usableAdapterChanged)
     Q_PROPERTY(QList<AdapterPtr> adapters READ adapters)
     Q_PROPERTY(QList<DevicePtr> devices READ devices)
@@ -159,6 +160,27 @@ public:
      */
     bool setBluetoothBlocked(bool blocked);
 
+    /**
+     * Returns whether the D-Bus object manager is monitored for
+     * interface changes.
+     *
+     * The default value is true.
+     *
+     * @return true if monitoring is enabled.
+     */
+    bool monitorObjectManagerInterfaces() const;
+
+    /**
+     * Sets whether the D-Bus object manager is monitored for
+     * interface changes.
+     *
+     * If monitoring is enabled, the manager detects any additions
+     * and removals of devices (nearby or paired) and adapters.
+     *
+     * @param monitor whether monitoring is enabled/disabled
+     */
+    void setMonitorObjectManagerInterfaces(bool monitor);
+
     /**
      * Returns a usable adapter.
      *
@@ -323,6 +345,11 @@ Q_SIGNALS:
      */
     void bluetoothBlockedChanged(bool blocked);
 
+    /**
+     * Indicates that object manager interface monitoring has changed.
+     */
+    void monitorObjectManagerInterfacesChanged(bool enabled);
+
     /**
      * Indicates that adapter was added.
      */
diff --git a/src/manager_p.cpp b/src/manager_p.cpp
index e81077b..864b5a4 100644
--- a/src/manager_p.cpp
+++ b/src/manager_p.cpp
@@ -29,6 +29,7 @@ ManagerPrivate::ManagerPrivate(Manager *parent)
     , m_bluezRunning(false)
     , m_loaded(false)
     , m_adaptersLoaded(false)
+    , m_monitorObjectManagerInterfaces(true)
 {
     qDBusRegisterMetaType<DBusManagerStruct>();
     qDBusRegisterMetaType<QVariantMapMap>();
@@ -145,17 +146,11 @@ void ManagerPrivate::getManagedObjectsFinished(QDBusPendingCallWatcher *watcher)
         return;
     }
 
-    DBusConnection::orgBluez().connect(Strings::orgBluez(),
-                                       QStringLiteral("/"),
-                                       QStringLiteral("org.freedesktop.DBus.ObjectManager"),
-                                       QStringLiteral("InterfacesAdded"),
-                                       this,
-                                       SLOT(interfacesAddedSlot(QDBusObjectPath)));
-    connect(m_dbusObjectManager, &DBusObjectManager::InterfacesRemoved, this, &ManagerPrivate::interfacesRemoved);
-
     m_loaded = true;
     m_initialized = true;
 
+    updateObjectManagerConnections();
+
     Q_EMIT q->operationalChanged(true);
 
     if (q->isBluetoothOperational()) {
@@ -165,6 +160,40 @@ void ManagerPrivate::getManagedObjectsFinished(QDBusPendingCallWatcher *watcher)
     Q_EMIT initFinished();
 }
 
+void ManagerPrivate::updateObjectManagerConnections()
+{
+    if (!m_loaded || !m_initialized) {
+        return;
+    }
+
+    if (m_monitorObjectManagerInterfaces) {
+        DBusConnection::orgBluez().connect(Strings::orgBluez(),
+                                           QStringLiteral("/"),
+                                           QStringLiteral("org.freedesktop.DBus.ObjectManager"),
+                                           QStringLiteral("InterfacesAdded"),
+                                           this,
+                                           SLOT(interfacesAddedSlot(QDBusObjectPath)));
+        if (m_dbusObjectManager) {
+            connect(m_dbusObjectManager, &DBusObjectManager::InterfacesRemoved,
+                    this, &ManagerPrivate::interfacesRemoved);
+
+            QDBusPendingCallWatcher *watcher = new QDBusPendingCallWatcher(m_dbusObjectManager->GetManagedObjects(), this);
+            connect(watcher, &QDBusPendingCallWatcher::finished, this, &ManagerPrivate::getInterfacesManagedObjectsFinished);
+        }
+    } else {
+        DBusConnection::orgBluez().disconnect(Strings::orgBluez(),
+                                              QStringLiteral("/"),
+                                              QStringLiteral("org.freedesktop.DBus.ObjectManager"),
+                                              QStringLiteral("InterfacesAdded"),
+                                              this,
+                                              SLOT(interfacesAddedSlot(QDBusObjectPath)));
+        if (m_dbusObjectManager) {
+            disconnect(m_dbusObjectManager, &DBusObjectManager::InterfacesRemoved,
+                       this, &ManagerPrivate::interfacesRemoved);
+        }
+    }
+}
+
 void ManagerPrivate::clear()
 {
     m_loaded = false;
diff --git a/src/manager_p.h b/src/manager_p.h
index 63b778a..b1c5611 100644
--- a/src/manager_p.h
+++ b/src/manager_p.h
@@ -61,6 +61,8 @@ public:
     bool rfkillBlocked() const;
     void setUsableAdapter(const AdapterPtr &adapter);
 
+    void updateObjectManagerConnections();
+
     Manager *q;
     Rfkill *m_rfkill;
     DBusObjectManager *m_dbusObjectManager;
@@ -75,6 +77,7 @@ public:
     bool m_bluezRunning;
     bool m_loaded;
     bool m_adaptersLoaded;
+    bool m_monitorObjectManagerInterfaces;
     bool m_bluetoothBlocked;
 
 Q_SIGNALS:
