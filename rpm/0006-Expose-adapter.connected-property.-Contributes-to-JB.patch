diff --git a/src/adapter.cpp b/src/adapter.cpp
index 6575983..5c6a90c 100644
--- a/src/adapter.cpp
+++ b/src/adapter.cpp
@@ -144,6 +144,11 @@ QList<DevicePtr> Adapter::devices() const
     return d->m_devices;
 }
 
+bool Adapter::isConnected() const
+{
+    return d->m_connected;
+}
+
 DevicePtr Adapter::deviceForAddress(const QString &address) const
 {
     for (DevicePtr device : std::as_const(d->m_devices)) {
diff --git a/src/adapter.h b/src/adapter.h
index 4743fa4..f359f57 100644
--- a/src/adapter.h
+++ b/src/adapter.h
@@ -49,6 +49,7 @@ class BLUEZQT_EXPORT Adapter : public QObject
     Q_PROPERTY(LEAdvertisingManagerPtr leAdvertisingManager READ leAdvertisingManager NOTIFY leAdvertisingManagerChanged)
     Q_PROPERTY(MediaPtr media READ media NOTIFY mediaChanged)
     Q_PROPERTY(QList<DevicePtr> devices READ devices)
+    Q_PROPERTY(bool connected READ isConnected NOTIFY connectedChanged)
 
 public:
     /**
@@ -246,6 +247,13 @@ public:
      */
     QList<DevicePtr> devices() const;
 
+    /**
+     * Returns true if this adapter is connected to any of its known devices.
+     *
+     * @return true if connected
+     */
+    bool isConnected() const;
+
     /**
      * Returns a device for specified address.
      *
@@ -381,6 +389,11 @@ Q_SIGNALS:
      */
     void deviceChanged(DevicePtr device);
 
+    /**
+     * Indicates that the connected state of this adapter has changed.
+     */
+    void connectedChanged(bool connected);
+
 private:
     explicit Adapter(const QString &path, const QVariantMap &properties);
 
diff --git a/src/adapter_p.cpp b/src/adapter_p.cpp
index 32dc0c7..4a5dd39 100644
--- a/src/adapter_p.cpp
+++ b/src/adapter_p.cpp
@@ -27,6 +27,7 @@ AdapterPrivate::AdapterPrivate(const QString &path, const QVariantMap &propertie
     , m_discoverableTimeout(0)
     , m_pairable(false)
     , m_pairableTimeout(0)
+    , m_connected(false)
 {
     m_bluezAdapter = new BluezAdapter(Strings::orgBluez(), path, DBusConnection::orgBluez(), this);
 
@@ -103,9 +104,13 @@ void AdapterPrivate::addDevice(const DevicePtr &device)
     m_devices.append(device);
     Q_EMIT q.lock()->deviceAdded(device);
 
+    deviceConnectedChanged();
+    connect(device.data(), &Device::connectedChanged, this, &AdapterPrivate::deviceConnectedChanged);
     connect(device.data(), &Device::deviceChanged, q.lock().data(), &Adapter::deviceChanged);
 }
 
+    deviceConnectedChanged();
+    disconnect(device.data(), &Device::connectedChanged, this, &AdapterPrivate::deviceConnectedChanged);
 void AdapterPrivate::removeDevice(const DevicePtr &device)
 {
     m_devices.removeOne(device);
@@ -165,4 +170,20 @@ void AdapterPrivate::propertiesChanged(const QString &interface, const QVariantM
     Q_EMIT q.lock()->adapterChanged(q.toStrongRef());
 }
 
+void AdapterPrivate::deviceConnectedChanged()
+{
+    bool newConnected = false;
+    for (auto device : m_devices) {
+        if (device->isConnected()) {
+            newConnected = true;
+            break;
+        }
+    }
+
+    if (m_connected != newConnected) {
+        m_connected = newConnected;
+        Q_EMIT q.data()->connectedChanged(m_connected);
+    }
+}
+
 } // namespace BluezQt
diff --git a/src/adapter_p.h b/src/adapter_p.h
index 65b4318..09f7856 100644
--- a/src/adapter_p.h
+++ b/src/adapter_p.h
@@ -40,6 +40,8 @@ public:
     QDBusPendingReply<> setDBusProperty(const QString &name, const QVariant &value);
     void propertiesChanged(const QString &interface, const QVariantMap &changed, const QStringList &invalidated);
 
+    void deviceConnectedChanged();
+
     QWeakPointer<Adapter> q;
     BluezAdapter *m_bluezAdapter;
     DBusProperties *m_dbusProperties;
@@ -56,6 +58,7 @@ public:
     bool m_discovering;
     QStringList m_uuids;
     QList<DevicePtr> m_devices;
+    bool m_connected;
     QString m_modalias;
     MediaPtr m_media;
     GattManagerPtr m_gattManager;
diff --git a/src/imports/declarativeadapter.cpp b/src/imports/declarativeadapter.cpp
index b18f0e7..8dd17c5 100644
--- a/src/imports/declarativeadapter.cpp
+++ b/src/imports/declarativeadapter.cpp
@@ -55,6 +55,8 @@ DeclarativeAdapter::DeclarativeAdapter(BluezQt::AdapterPtr adapter, QObject *par
     connect(m_adapter.data(), &BluezQt::Adapter::deviceChanged, this, [this](const BluezQt::DevicePtr &device) {
         Q_EMIT deviceChanged(declarativeDeviceFromPtr(device));
     });
+
+    connect(m_adapter.data(), &BluezQt::Adapter::connectedChanged, this, &DeclarativeAdapter::connectedChanged);
 }
 
 QString DeclarativeAdapter::ubi() const
@@ -157,6 +159,11 @@ QQmlListProperty<DeclarativeDevice> DeclarativeAdapter::devices()
     return QQmlListProperty<DeclarativeDevice>(this, nullptr, devicesCountDeclarativeAdapterFunction, devicesAtDeclarativeAdapterFunction);
 }
 
+bool DeclarativeAdapter::isConnected() const
+{
+    return m_adapter->isConnected();
+}
+
 DeclarativeDevice *DeclarativeAdapter::deviceForAddress(const QString &address) const
 {
     return declarativeDeviceFromPtr(m_adapter->deviceForAddress(address));
diff --git a/src/imports/declarativeadapter.h b/src/imports/declarativeadapter.h
index 4c4d669..5547cd7 100644
--- a/src/imports/declarativeadapter.h
+++ b/src/imports/declarativeadapter.h
@@ -33,6 +33,7 @@ class DeclarativeAdapter : public QObject
     Q_PROPERTY(QStringList uuids READ uuids NOTIFY uuidsChanged)
     Q_PROPERTY(QString modalias READ modalias NOTIFY modaliasChanged)
     Q_PROPERTY(QQmlListProperty<DeclarativeDevice> devices READ devices NOTIFY devicesChanged)
+    Q_PROPERTY(bool connected READ isConnected NOTIFY connectedChanged)
 
 public:
     explicit DeclarativeAdapter(BluezQt::AdapterPtr adapter, QObject *parent = nullptr);
@@ -71,6 +72,8 @@ public:
 
     QQmlListProperty<DeclarativeDevice> devices();
 
+    bool isConnected() const;
+
     BluezQt::AdapterPtr m_adapter;
     QHash<QString, DeclarativeDevice *> m_devices;
 
@@ -99,6 +102,7 @@ Q_SIGNALS:
     void deviceChanged(DeclarativeDevice *device);
 
     void devicesChanged(QQmlListProperty<DeclarativeDevice> devices);
+    void connectedChanged(bool connected);
 
 private Q_SLOTS:
     void slotDeviceAdded(BluezQt::DevicePtr device);
