diff --git a/src/imports/declarativedevicesmodel.cpp b/src/imports/declarativedevicesmodel.cpp
index 96aa15b..52dc4b2 100644
--- a/src/imports/declarativedevicesmodel.cpp
+++ b/src/imports/declarativedevicesmodel.cpp
@@ -16,6 +16,7 @@ DeclarativeDevicesModel::DeclarativeDevicesModel(QObject *parent)
     : QSortFilterProxyModel(parent)
     , m_manager(nullptr)
     , m_model(nullptr)
+    , m_filters(0)
 {
 }
 
@@ -31,6 +32,38 @@ void DeclarativeDevicesModel::setManager(DeclarativeManager *manager)
     setSourceModel(m_model);
 }
 
+DeclarativeDevicesModel::DeclarativeFilters DeclarativeDevicesModel::filters() const
+{
+    return m_filters;
+}
+
+void DeclarativeDevicesModel::setFilters(DeclarativeDevicesModel::DeclarativeFilters filters)
+{
+    if (m_filters != filters) {
+        m_filters = filters;
+        Q_EMIT filtersChanged(filters);
+    }
+    if (m_model) {
+        invalidateFilter();
+    }
+}
+
+QStringList DeclarativeDevicesModel::hiddenAddresses() const
+{
+    return m_hiddenAddresses;
+}
+
+void DeclarativeDevicesModel::setHiddenAddresses(const QStringList &addresses)
+{
+    if (m_hiddenAddresses != addresses) {
+        m_hiddenAddresses = addresses;
+        Q_EMIT hiddenAddressesChanged(addresses);
+    }
+    if (m_model) {
+        invalidateFilter();
+    }
+}
+
 QHash<int, QByteArray> DeclarativeDevicesModel::roleNames() const
 {
     QHash<int, QByteArray> roles = QSortFilterProxyModel::roleNames();
@@ -73,3 +106,22 @@ QVariant DeclarativeDevicesModel::data(const QModelIndex &index, int role) const
 
     return QSortFilterProxyModel::data(index, role);
 }
+
+bool DeclarativeDevicesModel::filterAcceptsRow(int source_row, const QModelIndex &source_parent) const
+{
+    if (!m_model) {
+        return QSortFilterProxyModel::filterAcceptsRow(source_row, source_parent);
+    }
+
+    BluezQt::DevicePtr dev = m_model->device(sourceModel()->index(source_row, 0, source_parent));
+    if (!dev) {
+        return QSortFilterProxyModel::filterAcceptsRow(source_row, source_parent);
+    }
+
+    if ( (dev->isPaired() && !(m_filters & PairedDevices))
+         || (!dev->isPaired() && !(m_filters & UnpairedDevices)) ) {
+        return false;
+    }
+
+    return !m_hiddenAddresses.contains(dev->address());
+}
diff --git a/src/imports/declarativedevicesmodel.h b/src/imports/declarativedevicesmodel.h
index a8e315b..0be4d66 100644
--- a/src/imports/declarativedevicesmodel.h
+++ b/src/imports/declarativedevicesmodel.h
@@ -18,6 +18,8 @@ class DeclarativeDevicesModel : public QSortFilterProxyModel
 {
     Q_OBJECT
     Q_PROPERTY(DeclarativeManager *manager READ manager WRITE setManager)
+    Q_PROPERTY(DeclarativeDevicesModel::DeclarativeFilters filters READ filters WRITE setFilters NOTIFY filtersChanged)
+    Q_PROPERTY(QStringList hiddenAddresses READ hiddenAddresses WRITE setHiddenAddresses NOTIFY hiddenAddressesChanged)
 
 public:
     enum DeclarativeDeviceRoles {
@@ -27,17 +29,41 @@ public:
         BatteryRole = BluezQt::DevicesModel::LastRole + 4,
     };
 
+    enum DeclarativeFilter {
+        PairedDevices = 0x1,
+        UnpairedDevices = 0x02,
+        AllDevices = PairedDevices | UnpairedDevices
+    };
+    Q_DECLARE_FLAGS(DeclarativeFilters, DeclarativeFilter)
+    Q_ENUM(DeclarativeFilter)
+    Q_FLAG(DeclarativeFilters)
+
     explicit DeclarativeDevicesModel(QObject *parent = nullptr);
 
     DeclarativeManager *manager() const;
     void setManager(DeclarativeManager *manager);
 
+    DeclarativeDevicesModel::DeclarativeFilters filters() const;
+    void setFilters(DeclarativeDevicesModel::DeclarativeFilters filters);
+
+    QStringList hiddenAddresses() const;
+    void setHiddenAddresses(const QStringList &addresses);
+
     QHash<int, QByteArray> roleNames() const override;
     QVariant data(const QModelIndex &index, int role) const override;
+    bool filterAcceptsRow(int source_row, const QModelIndex &source_parent) const override;
+
+Q_SIGNALS:
+    void filtersChanged(DeclarativeDevicesModel::DeclarativeFilters filters);
+    void hiddenAddressesChanged(const QStringList &addresses);
 
 private:
     DeclarativeManager *m_manager;
     BluezQt::DevicesModel *m_model;
+    QStringList m_hiddenAddresses;
+    DeclarativeFilters m_filters;
 };
 
+Q_DECLARE_OPERATORS_FOR_FLAGS(DeclarativeDevicesModel::DeclarativeFilters)
+
 #endif // DECLARATIVEMANAGER_H
